Sistema de Gerenciamento de Chamados

Este √© um aplicativo web completo para gerenciamento de chamados de suporte, constru√≠do com Next.js, React e Tailwind CSS. Ele oferece uma interface intuitiva para visualizar, criar, editar e excluir chamados, al√©m de uma se√ß√£o de relat√≥rios com filtros avan√ßados.

## ‚ú® Funcionalidades

### üñ•Ô∏è Layout e Navega√ß√£o
*   **Sidebar Fixa**: Uma barra lateral de 250px de largura no lado esquerdo, com links de navega√ß√£o.
*   **√Årea de Conte√∫do Principal**: Ocupa o restante do espa√ßo dispon√≠vel, exibindo o conte√∫do da p√°gina atual.
*   **Responsividade**: O layout se adapta a diferentes tamanhos de tela, com a sidebar colaps√°vel em telas menores.
*   **Identidade Visual**: Esquema de cores consistente utilizando tons de azul.
*   **Menu de Navega√ß√£o**: Links para Dashboard, Chamados e Relat√≥rios com √≠cones e indicador visual da p√°gina atual.

### üìä Dashboard
*   **Vis√£o Geral**: P√°gina inicial que exibe estat√≠sticas e uma vis√£o geral dos chamados.
*   **Cards de Estat√≠sticas**: Total de chamados, chamados em aberto, chamados de alta prioridade e chamados resolvidos hoje.
*   **Distribui√ß√£o por Prioridade**: Gr√°fico ou lista mostrando a propor√ß√£o de chamados por prioridade (Alta, Moderada, Baixa).
*   **Chamados Recentes**: Lista dos √∫ltimos chamados abertos.

### üé´ Tela de Listagem de Chamados
*   **Tabela Responsiva**: Exibe todos os chamados em um formato de tabela.
*   **Colunas**: N√∫mero, Prioridade, Aberto Por, Respons√°vel, Data de Abertura e √öltima Atualiza√ß√£o.
*   **Cores por Prioridade**:
    *   **ALTA**: Vermelho
    *   **MODERADA**: Amarelo
    *   **BAIXA**: Verde
*   **A√ß√µes por Linha**: Bot√µes para **Editar** e **Excluir** cada chamado.
*   **Confirma√ß√£o de Exclus√£o**: Modal de confirma√ß√£o antes de excluir um chamado.
*   **Feedback Visual**: Toasts para sucesso ou erro nas opera√ß√µes.

### üìù Formul√°rio para Cria√ß√£o/Edi√ß√£o de Chamados
*   **Formul√°rio Responsivo**: Layout em card centralizado, adapt√°vel a diferentes telas.
*   **Campos**:
    *   **Prioridade**: Dropdown com op√ß√µes BAIXA, MODERADA, ALTA.
    *   **N√∫mero**: Campo de texto.
    *   **Aberto Por**: Campo de texto.
    *   **Respons√°vel**: Campo de texto.
    *   **Descri√ß√£o Resumida**: √Årea de texto expandida.
*   **Campos N√£o Edit√°veis**: Data de Abertura e √öltima Atualiza√ß√£o s√£o gerados automaticamente.
*   **Valida√ß√µes B√°sicas**: Campos obrigat√≥rios com feedback visual.
*   **Bot√µes de A√ß√£o**: Salvar/Cancelar.

### üìà Relat√≥rios (Funcionalidade Avan√ßada)
*   **Filtros Din√¢micos**:
    *   **Prioridade**: Filtra chamados por prioridade espec√≠fica.
    *   **Respons√°vel**: Busca chamados atribu√≠dos a um respons√°vel.
    *   **Aberto Por**: Busca chamados abertos por um solicitante.
    *   **Data de Abertura (In√≠cio e Fim)**: Filtra chamados dentro de um per√≠odo de abertura.
*   **Cards de Resumo Filtrados**: Exibe o total de chamados filtrados e a contagem de chamados de alta e moderada prioridade dentro dos crit√©rios aplicados.
*   **Tabela de Chamados Filtrados**: Lista os chamados que correspondem aos filtros aplicados.
*   **Limpar Filtros**: Bot√£o para resetar todos os filtros.

### üì° Servi√ßo de Comunica√ß√£o com a API (Mock)
*   **`useApi` Hook**: Um custom hook para centralizar todas as requisi√ß√µes HTTP.
*   **Dados Mock**: Utiliza dados em mem√≥ria (`lib/mock-data.ts`) para simular um backend real.
*   **Opera√ß√µes CRUD**: Fun√ß√µes para `GET`, `POST`, `PUT` e `DELETE` chamados.
*   **Simula√ß√£o de Lat√™ncia**: Adiciona um pequeno atraso nas requisi√ß√µes para simular a lat√™ncia de rede.
*   **Simula√ß√£o de Erros**: Ocasionalmente, as requisi√ß√µes podem falhar para testar o tratamento de erros da aplica√ß√£o.
*   **Tratamento de Erros**: Captura e exibe mensagens de erro da API.

## üöÄ Tecnologias Utilizadas
*   **Next.js 15**: Framework React para aplica√ß√µes web.
*   **React**: Biblioteca JavaScript para constru√ß√£o de interfaces de usu√°rio.
*   **Tailwind CSS**: Framework CSS utilit√°rio para estiliza√ß√£o r√°pida e responsiva.
*   **shadcn/ui**: Cole√ß√£o de componentes UI reutiliz√°veis e acess√≠veis.
*   **TypeScript**: Linguagem que adiciona tipagem est√°tica ao JavaScript.
*   **Lucide React**: Biblioteca de √≠cones.
*   **date-fns**: Biblioteca para manipula√ß√£o de datas.

## ‚öôÔ∏è Como Rodar o Projeto

1.  **Clone o reposit√≥rio (se aplic√°vel) ou salve os arquivos:**
    \`\`\`bash
    # Se voc√™ estiver usando o v0, pode baixar o c√≥digo diretamente.
    # Caso contr√°rio, crie um novo projeto Next.js e copie os arquivos.
    npx create-next-app@latest my-chamados-app --typescript --tailwind --eslint --app --src-dir --use-npm
    cd my-chamados-app
    \`\`\`

2.  **Instale as depend√™ncias:**
    \`\`\`bash
    npm install
    \`\`\`

3.  **Execute o aplicativo:**
    \`\`\`bash
    npm run dev
    \`\`\`

    O aplicativo estar√° dispon√≠vel em `http://localhost:3000`.

## üí° Pr√≥ximos Passos e Melhorias Potenciais
*   **Integra√ß√£o com API Real**: Substituir as fun√ß√µes mock por chamadas HTTP reais para um backend (ex: Node.js com Express, Python com FastAPI, etc.).
*   **Autentica√ß√£o e Autoriza√ß√£o**: Implementar um sistema de login e controle de acesso para usu√°rios.
*   **Pagina√ß√£o**: Adicionar pagina√ß√£o na listagem de chamados para lidar com grandes volumes de dados.
*   **Busca por Texto**: Campo de busca global para pesquisar chamados por n√∫mero, descri√ß√£o, etc.
*   **Gr√°ficos de Relat√≥rios**: Integrar uma biblioteca de gr√°ficos (ex: Recharts, Chart.js) para visualiza√ß√µes mais ricas na se√ß√£o de relat√≥rios.
*   **Exporta√ß√£o de Dados**: Funcionalidade para exportar a lista de chamados filtrados (CSV, PDF).
*   **Notifica√ß√µes em Tempo Real**: Usar WebSockets para notifica√ß√µes sobre atualiza√ß√µes de chamados.
*   **Testes**: Adicionar testes unit√°rios e de integra√ß√£o.
